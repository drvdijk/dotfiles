#!/usr/bin/env bash
#

# Get current dir (so run this script from anywhere)
if [ -z $DOTFILES_DIR ]; then
	export DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
fi

set -e

COMMAND_NAME=$1
SUB_COMMAND_NAME=$2


sub_help () {
    echo "Usage: $(basename $0) <command>\n"
    echo "Commands:"
    echo "   help               This help message"
    echo "   bootstrap          Bootstrap the dotfiles"
#    echo "   edit               Open dotfiles in default editor ($EDITOR) and Git GUI ($GIT_GUI)"
#    echo "   reload             Reload dotfiles"
#    echo "   update             Update OS X Applications, Homebrew (cask)"
#    echo "   osx                Apply OS X system defaults"
#    echo "   dock               Apply OS X Dock settings"
#    echo "   install bash       Install Bash (Homebrew)"
#    echo "   install beets      Install Beets (PIP)"
#    echo "   install mjolnir    Install Mjolnir (Homebrew/Luarocks)"
#    echo "   install vundle     Install Vundle"
}



# Helper functions

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

# Sub commands

sub_bootstrap () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_DIR" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

sub_gitconfig () {
  if ! [ -f $DOTFILES_DIR/git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    user ' - What is your global git author name?'
    read -e git_authorname
    user ' - What is your global git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" $DOTFILES_DIR/git/gitconfig.symlink.example > $DOTFILES_DIR/git/gitconfig.symlink

    success 'gitconfig'
  fi
}



case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo "'$COMMAND_NAME' is not a known command or has errors." >&2
            sub_help
            exit 1
        fi
        ;;
esac

