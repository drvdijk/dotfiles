#!/usr/bin/env bash
#

# Load libs
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/lib.sh

# Exit immediately if anything exits with a non-zero status.
set -e

COMMAND_NAME=$1
SUB_COMMAND_NAME=$2


sub_help () {
    echo "Usage: $(basename $0) <command>"
    echo "Commands:"
    echo "   help                   This help message"
    echo "   bootstrap              Bootstrap the dotfiles"
    echo "   gitconfig              Setup git configuration"
    echo "   install <x>            Install package x"
    echo "   install homebrew       Install homebrew"
    echo "   install cask           Install homebrew cask (includes homebrew)"
    echo "   install mackup         Install mackup & restore config (requires/installs homebrew & cask)"
    echo "   install macos-defaults Install reasonable macOS defaults"
    echo "   install macos          Install all macOS stuff (defaults, homebrew, cask, ...)"
}



# Helper functions

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        warn "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      ok "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      ok "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      ok "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    ok "linked $1 to $2"
  fi
}

# Sub commands

sub_bootstrap () {
  bot 'Updating repo & submodules...'
  if [ -d "$DOTFILES_DIR/.git" ]; then
    pushd $DOTFILES_DIR >/dev/null
    git pull origin master
    ok "repository updated"
    git submodule update --init --recursive
    ok "submodules initialized & updated"
    popd >/dev/null
  fi

  bot 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_DIR" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  ok 'dotfiles installed'
}

sub_gitconfig () {
  if ! [ -f $DOTFILES_DIR/git/gitconfig.symlink ]
  then
    bot 'Setup gitconfig'

    echo -e ' - What is your global git author name?'
    read -e git_authorname
    echo -e ' - What is your global git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" $DOTFILES_DIR/git/gitconfig.symlink.example > $DOTFILES_DIR/git/gitconfig.symlink

    ok 'gitconfig set up'
  fi
}

sub_install () {
    local SCRIPT="${DOTFILES_DIR}/install/${SUB_COMMAND_NAME}.sh"
    [ -f "$SCRIPT" ] && source "$SCRIPT" || error "Unable to find script to install ${SUB_COMMAND_NAME}"
}


case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        if test $(type -t sub_${COMMAND_NAME}); then
            sub_${COMMAND_NAME} $@
            if [ $? = 127 ]; then
                error "'$COMMAND_NAME' is not a known command or has errors." >&2
            fi
        else
            error "'$COMMAND_NAME' is not a known command." >&2
            sub_help
        fi
        ;;
esac

